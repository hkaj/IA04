Agent Simulation parle à Agent environnement et lui dit de répondre à Agent Analyse.
Ne pas utiliser le DF (les agents d'analyse connaissent en dur l'agent simulation auprès duquel ils s'enregistrent)
L'agent analyse une fois son calcul fait retourne à Simulation qui attend le retour de tous les agents d'analyse pour envoyer les résultats à Environnement.
Environnement compulse ces résultats, met à jour la grille et cherche la condition d'arrêt.

CONVENTION D'ORDRE:
Agents 0 -> 8 : colonnes de gauche à droite
Agent 9 -> 17 : lignes de haut en bas
Agent 18 -> 26 : carrés de haut-gauche à bas-droite

-------------
| 1 | 2 | 3 |
-------------
| 4 | 5 | 6 |
-------------
| 7 | 8 | 9 |
-------------

NOTES: 
- Simulation enregistre les AID des AnaAgents.

- Chaque fois qu'il en a un nouveau, il envoie un message à Env avec le reply-to configuré pour répondre à l'AnaAgent.

- Env prend cet AID, il le stocke dans une liste nommée par exemple anaAgents et envoie un message à cet agent avec une colonne/ligne/carré à analyser en fonction de son ordre d'arrivée (qu'on peut déterminer avec len(anaAgents)).

- l'AnaAgent calcule et répond à SimAgent qui stocke la réponse dans une HashMap<AID, ArrayList<Case>>. La HashMap aura 27 ArrayList qui correspondront à chaque ligne/colonne/carré en suivant la convention (que seul Env connait).

- Une fois que la HashMap est pleine (len == 27) on l'envoie à Env qui met à jour le sudoku.
Et là l'algo recommence mais sans l'étape d'enregistrement des AnaAgents et les INFORM-REF(Sim -> Env). Env envoie directement les 27 requêtes.


PERFORMATIFS:
- enregistrement d'analyse auprès de simulation -> SUBSCRIBE
- demande d'execution de calcul (env -> analyse) -> REQUEST
- résultat d'un calcul (analyse -> simulation) -> INFORM
- (simulation -> env)

CONTENU DES MESSAGES :

//Analyse -> Simulation (résultat de calcul) TYPE = INFORM
{
	"content" : 
	{

		"cases" : [Case1, ..., Case9]	//ArrayList
	}
}

//Analyse -> Simulation (registration) TYPE = SUBSCRIBE
{
	// rien, on a seulement besoin du Sender et du performatif
}

//Simulation -> Environnement (résultats d'un tour d'algo) TYPE = INFORM
{
	"content" :
	{
		// HashMap<AID, ArrayList<Case>>
		AID1 : cases1,
		AID2 : cases2,
		...
		AID27 : cases27
	}
}

//Sim -> Env (fournit un nouveau AnaAgent à Env) TYPE = INFORM-REF | REPLY_TO = AID(AnaAgent, true)
{
	// rien, le reply-to contient l'AID et le performatif permet de filtrer
}

//Environnement -> Analyse (demande de traitement) TYPE = REQUEST
{
	"content" :
	{
		"cases" : [Case1, ..., Case9]	//ArrayList
	}
}

CONDITION D'ARRÊT :
- Toutes les cases ont une valeur fixée et plus de possibilités
- C'est environnement qui la détecte
- Message INFORM à Simulation pour lui indiquer la fin.

STRUCTURES :
Case = {int, List<Integer> pos[9]}; // Class
Case sudoku[9][9];

BEHAVIOURS:

Simulation:
	Réception des messages (CYCLIC)  // quand on reçoit un message, soit c'est une request et on on va dans inscription des agents, soit c'est un INFORM et on va dans "traitement des réponses"
	Inscription des agents d'analyse (OneShot)
	traitement d'un agent (OneShot)
	La cyclic va incrémenter un compteur de 1 à 27, une fois les 27 agents terminés, elle envoie les info à environnement qui check si le sudoku est fini puis réninit le compteur pour pouvoir refaire un tour.
	Si oui -> affichage du sudoku && inform a Simulation pour afficher un message de fin 
	Sinon -> relancer les agents d'analyse

Analyse: 
	Réception de message (CYCLIC)
	Analyse (Sequential) fait tourner les 3 algo
	Souscription -> oneShot

Environnement: 
	Reception
	Mise à jour de la grille (valeur et possibilité)
	Lancement des agents d'analyse

COOL STUFF:
Quand un agent d'analyse n'a rien à faire, il peut l'afficher ou le faire remonter pour dire à l'utilisateur combien d'agents d'analyse n'ont pas terminé.
